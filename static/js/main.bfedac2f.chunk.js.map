{"version":3,"sources":["components/Square.js","utils/gameOverConditions.js","components/Board.js","components/GameHeader.js","utils/theme.js","components/withDimensionScreen.js","components/withInstructionScreen.js","App.js","index.js"],"names":["Square","move","onClick","disabled","borderRadiusStyle","topLeftStyle","topRightStyle","bottomRightStyle","bottomLeftStyle","className","style","Button","undefined","get1DpositionFrom2Dmatrix","board","rowIndex","columnIndex","Math","sqrt","length","haveMovesLeft","i","gameStatus","winner","set","Set","j","position","add","size","has","values","next","value","winOnRow","winOnColumn","incrementAmount","topLeftBottomRightDiagonal","topRightBottomLeftDiagonal","topRightIndex","winOnDiagonal","isTie","playerMoveMapping","Board","setBoard","boardDimension","currentPlayer","handleTurn","setIsGameOver","setWinningPlayer","useEffect","Array","fill","map","_","updateTurn","newBoard","updateBoard","GameHeader","isGameOver","winningPlayer","dimension","gameTitle","nodeRef","useRef","Typography","variant","Fade","ref","in","transitionDelay","color","player","startCase","theme","createMuiTheme","palette","primary","main","amber","contrastText","deepPurple","secondary","textSecondary","text","props","MuiButton","disableElevation","overrides","backgroundColor","textColor","MuiInputLabel","root","StartScreen","setNewInstance","setDimension","useState","setDisabled","isValidInput","setIsValidInput","ThemeProvider","Box","TextField","onInput","e","userInput","target","parseInt","placeholder","helperText","InputLabelProps","classes","InputProps","error","onKeyDown","event","key","withDimensionScreen","WrappedComponent","numberOfPlayers","newInstance","ChoosePlayerNumberScreen","setNumberOfPlayers","setPlayerNumberWasChosen","Grid","container","item","sm","px","paddingTop","Link","href","rel","withInstructionScreen","playerNumberWasChosen","initialBoardState","setCurrentPlayer","isComputerTurn","setTimeout","bestMove","bestScore","testBoard","score","miniMax","isMaximizingPlayer","scoreMap","Infinity","aiGameBoard","max","min","window","location","reload","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfedac2f.chunk.js","sourcesContent":["import { Button } from '@material-ui/core';\nimport \"./Square.css\";\n\nconst Square = ({ move, onClick, disabled, borderRadiusStyle }) => {\n  // const handler = disabled => disabled ? undefined : onClick\n  const { topLeftStyle, topRightStyle, bottomRightStyle, bottomLeftStyle } = borderRadiusStyle;\n\n  return (\n    <div className=\"box\" style={{ 'display': 'inline-block' }}>\n      <Button\n        className=\"content\"\n        style={{ 'position': 'absolute', 'width': '100%', 'borderRadius': `${topLeftStyle} ${topRightStyle} ${bottomRightStyle} ${bottomLeftStyle}` }}\n        onClick={move !== null || disabled ? undefined : onClick}\n      >\n        {move}\n      </Button>\n    </div>\n  );\n};\n\nexport { Square };\n","const get1DpositionFrom2Dmatrix = (board, rowIndex, columnIndex) => {\n    return (rowIndex * Math.sqrt(board.length)) + columnIndex;\n};\n\nconst winOnRow = (board) => {\n  for (let i = 0; i < Math.sqrt(board.length); i++) {\n    const set = new Set();\n    for (let j = 0; j < Math.sqrt(board.length); j++) {\n      const position = get1DpositionFrom2Dmatrix(board, i, j);\n      set.add(board[position]);\n    }\n\n    if (set.size === 1 & !set.has(null)) {\n      const it = set.values();\n      const winner = it.next().value;\n      return winner;\n    }\n  }\n\n  return undefined;\n};\n\nconst winOnColumn = (board) => {\n  for (let i = 0; i < Math.sqrt(board.length); i++) {\n    const set = new Set();\n    for (let j = 0; j < Math.sqrt(board.length); j++) {\n      const position = get1DpositionFrom2Dmatrix(board, j, i);\n      set.add(board[position]);\n    }\n\n    if (set.size === 1 & !set.has(null)) {\n      const it = set.values();\n      const winner = it.next().value;\n      return winner;\n    }\n  }\n\n  return undefined;\n};\n\nconst winOnDiagonal = (board) => {\n  const topLeftBottomRightDiagonal = new Set();\n  const topRightBottomLeftDiagonal = new Set();\n  let incrementAmount;\n\n  // -- Check diagonal from top left to bottom right\n  incrementAmount = Math.sqrt(board.length) + 1;\n\n  for (let i = 0; i < board.length; i = i + incrementAmount) {\n    topLeftBottomRightDiagonal.add(board[i]);\n  }\n\n  if (topLeftBottomRightDiagonal.size === 1 && !topLeftBottomRightDiagonal.has(null)) {\n    const it = topLeftBottomRightDiagonal.values();\n    const winner = it.next().value;\n    return winner;\n  }\n\n  // -- Check diagonal from top right to bottom left\n  const topRightIndex = Math.sqrt(board.length) - 1;\n  incrementAmount = Math.sqrt(board.length) - 1;\n\n  for (let i = topRightIndex; i < board.length - 1; i = i + incrementAmount) {\n    topRightBottomLeftDiagonal.add(board[i]);\n  }\n\n  if (topRightBottomLeftDiagonal.size === 1 && !topRightBottomLeftDiagonal.has(null)) {\n    const it = topRightBottomLeftDiagonal.values();\n    const winner = it.next().value;\n    return winner;\n  }\n\n  // There is no winner\n  return undefined;\n};\n\nconst haveMovesLeft = (board) => {\n  // If there are nulls on the board, then there are still moves\n  for (let i = 0; i < board.length; i++) {\n    if (board[i] === null) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst gameStatus = (board) => {\n  const winner = winOnRow(board) || winOnColumn(board) || winOnDiagonal(board);\n\n  return {\n    isTie: !(haveMovesLeft(board)) && (winner === undefined),\n    winner: winner\n  };\n};\n\nexport { gameStatus };\n","import React, { useEffect } from 'react';\nimport { Square } from './Square';\nimport { gameStatus } from '../utils/gameOverConditions';\n\nconst playerMoveMapping = {\n  'playerOne': 'x',\n  'playerTwo': 'o',\n};\n\nconst updateTurn = (currentPlayer) => {\n  return currentPlayer === 'playerOne' ? 'playerTwo' : 'playerOne';\n};\n\nconst Board = ({ board, setBoard, boardDimension, currentPlayer, handleTurn, disabled, setIsGameOver, setWinningPlayer }) => {\n  // Assuming a row major orientation: 1D position = (rowIndex * width) + columnIndex\n  const get1DpositionFrom2Dmatrix = (rowIndex, columnIndex) => {\n    const position = (rowIndex * boardDimension) + columnIndex;\n    return position;\n  };\n\n  const updateBoard = (board, rowIndex, columnIndex, move) => {\n    let newBoard = [...board];\n    const position = get1DpositionFrom2Dmatrix(rowIndex, columnIndex);\n    newBoard[position] = move;\n    return newBoard;\n  };\n\n  const { isTie, winner } = gameStatus(board);\n\n  useEffect(() => {\n    if (winner || isTie) {\n      setIsGameOver(true);\n      setWinningPlayer(winner);\n    }\n\n  }, [isTie, winner]);\n\n  return (\n    <div style={{ 'width': 'max-content' }}>\n      {Array(boardDimension).fill(null).map((_, rowIndex) => {\n        return (\n          <div key={rowIndex}>\n            {Array(boardDimension).fill(null).map((_, columnIndex) => {\n              const position = get1DpositionFrom2Dmatrix(rowIndex, columnIndex);\n\n              const topLeftStyle = (rowIndex === 0 && columnIndex === 0) ? '5px' : '0';\n              const topRightStyle = (rowIndex === 0 && columnIndex === (boardDimension - 1)) ? '5px' : '0';\n              const bottomLeftStyle = (rowIndex === (boardDimension - 1) && columnIndex === 0) ? '5px' : '0';\n              const bottomRightStyle = (rowIndex === (boardDimension - 1) && columnIndex === (boardDimension - 1)) ? '5px' : '0';\n\n              return (\n                <Square\n                  borderRadiusStyle={{ topLeftStyle, topRightStyle, bottomRightStyle, bottomLeftStyle }}\n                  disabled={disabled}\n                  key={columnIndex}\n                  move={board[position]}\n                  onClick={() => {\n                    handleTurn(updateTurn(currentPlayer))\n                    const newBoard = updateBoard(board, rowIndex, columnIndex, playerMoveMapping[`${currentPlayer}`]);\n                    setBoard(newBoard);\n                  }}\n                />\n              )\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport { Board };\n","import React, { useRef } from 'react';\nimport startCase from 'lodash.startcase';\nimport { Typography, Fade } from '@material-ui/core';\n\nconst GameHeader = ({ isGameOver, currentPlayer, winningPlayer, dimension }) => {\n  const formatPlayer = (player) => {\n    return startCase(player);\n  };\n\n  const gameTitle = dimension === 3 ? 'Tic Tac Toe' : 'Connect Four';\n\n  const nodeRef = useRef(null);\n\n  return (\n    <div>\n      <Typography variant=\"h3\">{gameTitle}</Typography>\n      {\n        (() => {\n          if (!isGameOver) return <Typography  variant=\"h6\">{formatPlayer(currentPlayer)}'s Turn</Typography>;\n          if (winningPlayer === undefined) return <Typography  variant=\"h6\">There is a tie!</Typography>\n          return <Fade ref={nodeRef} in={true} style={{ transitionDelay: true ? '80ms' : '0ms' }}><Typography ref={nodeRef} variant=\"h6\" color=\"primary\">{`Player ${winningPlayer} Won!`}</Typography></Fade>;\n        })()\n      }\n    </div>\n  );\n};\n\nexport { GameHeader };\n","import { createMuiTheme } from \"@material-ui/core\";\nimport { deepPurple, amber } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: amber[500],\n      contrastText: deepPurple[900]\n    },\n    secondary: {\n      main: deepPurple[500],\n      contrastText: amber[900]\n    },\n    textSecondary: {\n      main: '#7A9E7E',\n      contrastText: '#7A9E7E',\n    },\n    text: {\n      disabled: amber[500]\n    }\n  }\n});\n\ntheme.props = {\n  MuiButton: {\n    disableElevation: true,\n    variant: \"contained\"\n  }\n};\n\ntheme.overrides = {\n  MuiButton: {\n    disabled: {\n      backgroundColor: amber[500],\n      textColor: deepPurple[500]\n    }\n  },\n  MuiInputLabel: {\n    root: {\n      color: \"orange\",\n      \"&$focused\": { // increase the specificity for the pseudo class\n        color: \"blue\"\n      }\n    }\n  }\n};\n\nexport default theme;\n","import { Box, Button, TextField, ThemeProvider, Typography } from '@material-ui/core';\nimport { useState } from 'react';\nimport theme from '../utils/theme';\n\nconst StartScreen = ({setNewInstance, setDimension}) => {\n  const [disabled, setDisabled] = useState(true);\n  const [isValidInput, setIsValidInput] = useState(true);\n\n  const isValidDimension = (userInput) => {\n    if (parseInt(userInput, 10) === 3 || parseInt(userInput, 10) === 4) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const classes = {\n    cssLabel: {\n      color: 'green'\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ 'maxWidth': '900px', 'margin': '3rem auto' }}>\n        <Typography variant=\"h4\" style={{ 'marginBottom': '1rem'}}>Configure your board!</Typography>\n        <Typography variant=\"h5\" color=\"primary\">Enter board dimensions:</Typography>\n        <Box style={{'marginTop': '1rem'}}>\n          <TextField\n            onInput={(e) => {\n              if (isValidDimension(e.target.value)) {\n                setIsValidInput(true);\n                setDisabled(false);\n                const value = parseInt(e.target.value, 10);\n                setDimension(value);\n              } else {\n                setIsValidInput(false);\n                setDisabled(true);\n              }\n            }}\n            placeholder=\"Enter board dimensions\"\n            helperText=\"Please enter a dimension of either 3 or 4.\"\n            InputLabelProps={{\n              classes: {\n                root: classes.cssLabel\n              }\n            }}\n            InputProps={{\n              classes: {}\n            }}\n            error={!isValidInput}\n            onKeyDown={ event => {\n              if (event.key === 'Enter') setNewInstance(false)\n            }}\n            style={{ 'marginBottom': '1rem' }}\n          />\n          <br></br>\n          <Button disabled={disabled} onClick={() => setNewInstance(false)} color=\"primary\">Play Game</Button>\n        </Box>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nconst withDimensionScreen = (WrappedComponent) => {\n  return ({ numberOfPlayers }) => {\n    const [newInstance, setNewInstance] = useState(true);\n    const [dimension, setDimension] = useState(3);\n\n    if (newInstance) return <StartScreen setNewInstance={setNewInstance} setDimension={setDimension}/>;\n    return <WrappedComponent numberOfPlayers={numberOfPlayers} dimension={dimension}/>;\n  };\n};\n\nexport default withDimensionScreen;\n","import React, { useState } from 'react';\nimport { Box, Button, Grid, Link, ThemeProvider, Typography } from '@material-ui/core';\nimport theme from '../utils/theme';\nimport '../App.css';\n\nconst ChoosePlayerNumberScreen = ({ setNumberOfPlayers, setPlayerNumberWasChosen }) => {\n  return(\n    <ThemeProvider theme={theme}>\n      <div style={{ 'margin': '3rem'}}>\n        <Typography variant=\"h4\" style={{ 'marginBottom': '1rem'}}>Let's play Tic Tac Toe or Connect Four</Typography>\n        <Typography variant=\"h5\" color=\"primary\">First, choose the number of players:</Typography>\n        <Grid container style={{ 'maxWidth': '900px', 'margin': 'auto' }}>\n          <Grid item sm={6} style={{ 'width' : '100%', 'marginTop': '1rem' }}>\n            <Button\n              style={{ 'width': '50%'}}\n              variant=\"contained\" onClick={() => {\n                setNumberOfPlayers(1);\n                setPlayerNumberWasChosen(true);\n              }}\n              color=\"primary\">\n                1 Player\n            </Button>\n            <Box px={3} paddingTop={2}>\n              <Typography variant=\"body1\" style={{'marginBottom': '1rem' }}>1 Player mode pits you against an AI player that uses the Minimax algorithm, a game theory strategy, to choose the best move to make.</Typography>\n              <Link href=\"https://en.wikipedia.org/wiki/Minimax\" color=\"textSecondary\" target=\"_blank\" rel=\"noopener\">Click to read more about the AI logic!</Link>\n            </Box>\n          </Grid>\n          <Grid item sm={6} style={{ 'width' : '100%', 'marginTop': '1rem'}}>\n            <Button\n              style={{ 'width': '50%'}}\n              variant=\"contained\" onClick={() => {\n                setNumberOfPlayers(2);\n                setPlayerNumberWasChosen(true);\n              }}\n              color=\"primary\">\n                2 Players\n            </Button>\n            <Box px={3} paddingTop={2}>\n              <Typography variant=\"body1\">2 Player mode pits you against a real person.</Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nconst withInstructionScreen = (WrappedComponent) => {\n  return () => {\n    const [playerNumberWasChosen, setPlayerNumberWasChosen] = useState(false);\n    const [numberOfPlayers, setNumberOfPlayers] = useState(1);\n\n      if (!playerNumberWasChosen) return <ChoosePlayerNumberScreen setNumberOfPlayers={setNumberOfPlayers}  setPlayerNumberWasChosen={setPlayerNumberWasChosen}/>;\n      return <WrappedComponent numberOfPlayers={numberOfPlayers}/>;\n  };\n};\n\nexport default withInstructionScreen;\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport { Board } from './components/Board';\nimport { GameHeader } from './components/GameHeader';\nimport withDimensionScreen from './components/withDimensionScreen';\nimport { Grid, Button, ThemeProvider } from '@material-ui/core';\nimport withInstructionScreen from './components/withInstructionScreen';\nimport { gameStatus } from './utils/gameOverConditions'\nimport { spacing } from '@material-ui/system';\n\nimport theme from './utils/theme';\n\nconst App = ({ numberOfPlayers, dimension }) => {\n  const initialBoardState = new Array(dimension  * dimension).fill(null);\n  const [board, setBoard] = useState(initialBoardState);\n  const [currentPlayer, setCurrentPlayer] = useState('playerOne');\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winningPlayer, setWinningPlayer] = useState(undefined);\n\n  const isComputerTurn = numberOfPlayers === 1 && currentPlayer !== 'playerOne';\n\n  const resetGame = () => {\n    setBoard(initialBoardState);\n    setCurrentPlayer('playerOne');\n    setIsGameOver(false);\n    setWinningPlayer(undefined);\n  };\n\n  useEffect(() => {\n    const bestMove = () => {\n      const {isTie, winner} = gameStatus(board);\n\n      if (winner) {\n        setIsGameOver(true);\n        setWinningPlayer(winner);\n        return;\n      }\n\n      let bestScore = -Infinity;\n      let bestMove;\n\n      let newBoard = [...board];\n\n      for (let i = 0; i < board.length; i++) {\n        if (board[i] === null) {  // if this spot is available, try the rest of the tree\n          let testBoard = [...board];\n          testBoard[i] = 'o';\n          let score = miniMax(testBoard, false);\n          testBoard[i] = '';\n           if (score > bestScore) {\n            bestScore = score;\n            bestMove = i;\n          }\n        }\n      }\n\n      newBoard[bestMove] = 'o'\n      setBoard(newBoard);\n      setCurrentPlayer('playerOne');\n    };\n\n    if (isComputerTurn && (winningPlayer === undefined)) {\n      // Simulate that computer player is \"thinking\"\n      setTimeout(() => {\n        bestMove();\n      }, 1500);\n    }\n  }, [isComputerTurn]);\n\n  const miniMax = (testBoard, isMaximizingPlayer) => {\n    const scoreMap = {\n      \"o\": 1,\n      \"x\": -1,\n      \"Tie\": 0\n    };\n\n    const {isTie, winner} = gameStatus(testBoard);\n\n     if (isTie) {\n      return scoreMap[\"Tie\"];\n    }\n\n    if (winner) {\n      return scoreMap[winner];\n    }\n\n    let bestScore;\n\n    if (isMaximizingPlayer) { // goal: maximize score\n      bestScore = -Infinity;\n\n      for (let i = 0; i < testBoard.length; i++) {\n        if (testBoard[i] === null) {   // no move here\n          const aiGameBoard = [...testBoard];\n          aiGameBoard[i] = 'o';\n          let score = miniMax(aiGameBoard, false);\n          bestScore = Math.max(bestScore, score);\n        }\n      }\n      return bestScore;\n    } else {  // goal: minimize score\n      bestScore = Infinity;\n\n      for (let i = 0; i < testBoard.length; i++) {\n        if (testBoard[i] === null) {   // no move here\n          const aiGameBoard = [...testBoard];\n          aiGameBoard[i] = 'x';\n          let score = miniMax(aiGameBoard, true);\n          bestScore = Math.min(bestScore, score);\n        }\n      }\n      return bestScore;\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <GameHeader isGameOver={isGameOver} currentPlayer={currentPlayer} winningPlayer={winningPlayer} dimension={dimension}/>\n          <Grid style={{ 'marginBottom': '1rem'}}>\n            <Button color=\"primary\" onClick={ resetGame }>Restart Game</Button>\n            <Button color=\"secondary\" onClick={ ()=> { window.location.reload() }}>Go to Start Screen</Button>\n          </Grid>\n          <Board\n            board={board}\n            setBoard={setBoard}\n            boardDimension={dimension}\n            handleTurn={setCurrentPlayer}\n            currentPlayer={currentPlayer}\n            setIsGameOver={setIsGameOver}\n            setWinningPlayer={setWinningPlayer}\n            disabled={isComputerTurn || isGameOver}\n          />\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default withInstructionScreen(withDimensionScreen(App));\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}