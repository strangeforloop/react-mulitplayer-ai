{"version":3,"sources":["components/Square.js","utils/gameOverConditions.js","components/Board.js","components/GameHeader.js","utils/theme.js","components/withDimensionScreen.js","components/withInstructionScreen.js","App.js","index.js"],"names":["Square","move","onClick","disabled","borderRadiusStyle","topLeftStyle","topRightStyle","bottomRightStyle","bottomLeftStyle","className","style","Button","undefined","get1DpositionFrom2Dmatrix","board","rowIndex","columnIndex","Math","sqrt","length","haveMovesLeft","i","gameStatus","winner","set","Set","j","position","add","size","has","values","next","value","winOnRow","winOnColumn","incrementAmount","topLeftBottomRightDiagonal","topRightBottomLeftDiagonal","topRightIndex","winOnDiagonal","isTie","playerMoveMapping","Board","setBoard","boardDimension","currentPlayer","handleTurn","setIsGameOver","setWinningPlayer","useEffect","Array","fill","map","_","updateTurn","newBoard","updateBoard","GameHeader","isGameOver","winningPlayer","dimension","gameTitle","nodeRef","useRef","Typography","variant","Fade","ref","in","transitionDelay","color","toUpperCase","player","startCase","theme","createMuiTheme","palette","primary","main","amber","contrastText","deepPurple","secondary","textSecondary","blue","text","props","MuiButton","disableElevation","overrides","backgroundColor","textColor","MuiInputLabel","root","StartScreen","setNewInstance","setDimension","useState","setDisabled","isValidInput","setIsValidInput","isValidDimension","userInput","parseInt","ThemeProvider","Box","TextField","onInput","e","target","placeholder","helperText","InputLabelProps","classes","InputProps","error","onKeyDown","event","key","withDimensionScreen","WrappedComponent","newInstance","ChoosePlayerNumberScreen","setNumberOfPlayers","setPlayerNumberWasChosen","Grid","container","item","sm","px","paddingTop","Link","href","rel","playerNumberWasChosen","numberOfPlayers","withInstructionScreen","initialBoardState","setCurrentPlayer","isComputerTurn","setTimeout","bestMove","bestScore","testBoard","score","miniMax","isMaximizingPlayer","scoreMap","Infinity","aiGameBoard","max","min","window","location","reload","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01639a5e.chunk.js","sourcesContent":["import { Button } from '@material-ui/core';\nimport \"./Square.css\";\n\nconst Square = ({ move, onClick, disabled, borderRadiusStyle }) => {\n  // const handler = disabled => disabled ? undefined : onClick\n  const { topLeftStyle, topRightStyle, bottomRightStyle, bottomLeftStyle } = borderRadiusStyle;\n\n  return (\n    <div className=\"box\" style={{ 'display': 'inline-block' }}>\n      <Button\n        className=\"content\"\n        style={{ 'position': 'absolute', 'width': '100%', 'borderRadius': `${topLeftStyle} ${topRightStyle} ${bottomRightStyle} ${bottomLeftStyle}` }}\n        onClick={move !== null || disabled ? undefined : onClick}\n      >\n        {move}\n      </Button>\n    </div>\n  );\n};\n\nexport { Square };\n","const get1DpositionFrom2Dmatrix = (board, rowIndex, columnIndex) => {\n    return (rowIndex * Math.sqrt(board.length)) + columnIndex;\n};\n\nconst winOnRow = (board) => {\n  for (let i = 0; i < Math.sqrt(board.length); i++) {\n    const set = new Set();\n    for (let j = 0; j < Math.sqrt(board.length); j++) {\n      const position = get1DpositionFrom2Dmatrix(board, i, j);\n      set.add(board[position]);\n    }\n\n    if (set.size === 1 & !set.has(null)) {\n      const it = set.values();\n      const winner = it.next().value;\n      return winner;\n    }\n  }\n\n  return undefined;\n};\n\nconst winOnColumn = (board) => {\n  for (let i = 0; i < Math.sqrt(board.length); i++) {\n    const set = new Set();\n    for (let j = 0; j < Math.sqrt(board.length); j++) {\n      const position = get1DpositionFrom2Dmatrix(board, j, i);\n      set.add(board[position]);\n    }\n\n    if (set.size === 1 & !set.has(null)) {\n      const it = set.values();\n      const winner = it.next().value;\n      return winner;\n    }\n  }\n\n  return undefined;\n};\n\nconst winOnDiagonal = (board) => {\n  const topLeftBottomRightDiagonal = new Set();\n  const topRightBottomLeftDiagonal = new Set();\n  let incrementAmount;\n\n  // -- Check diagonal from top left to bottom right\n  incrementAmount = Math.sqrt(board.length) + 1;\n\n  for (let i = 0; i < board.length; i = i + incrementAmount) {\n    topLeftBottomRightDiagonal.add(board[i]);\n  }\n\n  if (topLeftBottomRightDiagonal.size === 1 && !topLeftBottomRightDiagonal.has(null)) {\n    const it = topLeftBottomRightDiagonal.values();\n    const winner = it.next().value;\n    return winner;\n  }\n\n  // -- Check diagonal from top right to bottom left\n  const topRightIndex = Math.sqrt(board.length) - 1;\n  incrementAmount = Math.sqrt(board.length) - 1;\n\n  for (let i = topRightIndex; i < board.length - 1; i = i + incrementAmount) {\n    topRightBottomLeftDiagonal.add(board[i]);\n  }\n\n  if (topRightBottomLeftDiagonal.size === 1 && !topRightBottomLeftDiagonal.has(null)) {\n    const it = topRightBottomLeftDiagonal.values();\n    const winner = it.next().value;\n    return winner;\n  }\n\n  // There is no winner\n  return undefined;\n};\n\nconst haveMovesLeft = (board) => {\n  // If there are nulls on the board, then there are still moves\n  for (let i = 0; i < board.length; i++) {\n    if (board[i] === null) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst gameStatus = (board) => {\n  const winner = winOnRow(board) || winOnColumn(board) || winOnDiagonal(board);\n\n  return {\n    isTie: !(haveMovesLeft(board)) && (winner === undefined),\n    winner: winner\n  };\n};\n\nexport { gameStatus };\n","import React, { useEffect } from 'react';\nimport { Square } from './Square';\nimport { gameStatus } from '../utils/gameOverConditions';\n\nconst playerMoveMapping = {\n  'playerOne': 'x',\n  'playerTwo': 'o',\n};\n\nconst updateTurn = (currentPlayer) => {\n  return currentPlayer === 'playerOne' ? 'playerTwo' : 'playerOne';\n};\n\nconst Board = ({ board, setBoard, boardDimension, currentPlayer, handleTurn, disabled, setIsGameOver, setWinningPlayer }) => {\n  // Assuming a row major orientation: 1D position = (rowIndex * width) + columnIndex\n  const get1DpositionFrom2Dmatrix = (rowIndex, columnIndex) => {\n    const position = (rowIndex * boardDimension) + columnIndex;\n    return position;\n  };\n\n  const updateBoard = (board, rowIndex, columnIndex, move) => {\n    let newBoard = [...board];\n    const position = get1DpositionFrom2Dmatrix(rowIndex, columnIndex);\n    newBoard[position] = move;\n    return newBoard;\n  };\n\n  const { isTie, winner } = gameStatus(board);\n\n  useEffect(() => {\n    if (winner || isTie) {\n      setIsGameOver(true);\n      setWinningPlayer(winner);\n    }\n\n  }, [isTie, winner]);\n\n  return (\n    <div style={{ 'width': 'max-content' }}>\n      {Array(boardDimension).fill(null).map((_, rowIndex) => {\n        return (\n          <div key={rowIndex}>\n            {Array(boardDimension).fill(null).map((_, columnIndex) => {\n              const position = get1DpositionFrom2Dmatrix(rowIndex, columnIndex);\n\n              const topLeftStyle = (rowIndex === 0 && columnIndex === 0) ? '5px' : '0';\n              const topRightStyle = (rowIndex === 0 && columnIndex === (boardDimension - 1)) ? '5px' : '0';\n              const bottomLeftStyle = (rowIndex === (boardDimension - 1) && columnIndex === 0) ? '5px' : '0';\n              const bottomRightStyle = (rowIndex === (boardDimension - 1) && columnIndex === (boardDimension - 1)) ? '5px' : '0';\n\n              return (\n                <Square\n                  borderRadiusStyle={{ topLeftStyle, topRightStyle, bottomRightStyle, bottomLeftStyle }}\n                  disabled={disabled}\n                  key={columnIndex}\n                  move={board[position]}\n                  onClick={() => {\n                    handleTurn(updateTurn(currentPlayer))\n                    const newBoard = updateBoard(board, rowIndex, columnIndex, playerMoveMapping[`${currentPlayer}`]);\n                    setBoard(newBoard);\n                  }}\n                />\n              )\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport { Board };\n","import React, { useRef } from 'react';\nimport startCase from 'lodash.startcase';\nimport { Typography, Fade } from '@material-ui/core';\n\nconst GameHeader = ({ isGameOver, currentPlayer, winningPlayer, dimension }) => {\n  const formatPlayer = (player) => {\n    return startCase(player);\n  };\n\n  const gameTitle = dimension === 3 ? 'Tic Tac Toe' : 'Connect Four';\n\n  const nodeRef = useRef(null);\n\n  return (\n    <div>\n      <Typography variant=\"h3\">{gameTitle}</Typography>\n      {\n        (() => {\n          if (!isGameOver) return <Typography  variant=\"h6\">{formatPlayer(currentPlayer)}'s Turn</Typography>;\n          if (winningPlayer === undefined) return <Typography  variant=\"h6\">There is a tie!</Typography>\n          return <Fade ref={nodeRef} in={true} style={{ transitionDelay: true ? '80ms' : '0ms' }}><Typography ref={nodeRef} variant=\"h6\" color=\"primary\">{`${winningPlayer.toUpperCase()} Won!`}</Typography></Fade>;\n        })()\n      }\n    </div>\n  );\n};\n\nexport { GameHeader };\n","import { createMuiTheme } from \"@material-ui/core\";\nimport { deepPurple, amber, blue } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: amber[500],\n      contrastText: deepPurple[900]\n    },\n    secondary: {\n      main: deepPurple[500],\n      contrastText: amber[600]\n    },\n    textSecondary: {\n      main: blue[400],\n      contrastText: '#7A9E7E',\n    },\n    text: {\n      disabled: amber[500]\n    }\n  }\n});\n\ntheme.props = {\n  MuiButton: {\n    disableElevation: true,\n    variant: \"contained\"\n  }\n};\n\ntheme.overrides = {\n  MuiButton: {\n    disabled: {\n      backgroundColor: amber[500],\n      textColor: deepPurple[500]\n    }\n  },\n  MuiInputLabel: {\n    root: {\n      color: \"orange\",\n      \"&$focused\": { // increase the specificity for the pseudo class\n        color: \"blue\"\n      }\n    }\n  }\n};\n\nexport default theme;\n","import { Box, Button, TextField, ThemeProvider, Typography } from '@material-ui/core';\nimport { useState } from 'react';\nimport theme from '../utils/theme';\n\nconst StartScreen = ({setNewInstance, setDimension}) => {\n  const [disabled, setDisabled] = useState(true);\n  const [isValidInput, setIsValidInput] = useState(true);\n\n  const isValidDimension = (userInput) => {\n    if (parseInt(userInput, 10) === 3 || parseInt(userInput, 10) === 4) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const classes = {\n    cssLabel: {\n      color: 'green'\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ 'maxWidth': '900px', 'margin': '3rem auto' }}>\n        <Typography variant=\"h4\" style={{ 'marginBottom': '1rem'}}>Let's play Tic Tac Toe or Connect Four</Typography>\n        {/* <Typography variant=\"h4\" style={{ 'marginBottom': '1rem'}}>Configure your board!</Typography> */}\n        <Typography variant=\"h5\" color=\"primary\">Enter board dimensions:</Typography>\n        <Box style={{'marginTop': '1rem'}}>\n          <TextField\n            onInput={(e) => {\n              if (isValidDimension(e.target.value)) {\n                setIsValidInput(true);\n                setDisabled(false);\n                const value = parseInt(e.target.value, 10);\n                setDimension(value);\n              } else {\n                setIsValidInput(false);\n                setDisabled(true);\n              }\n            }}\n            placeholder=\"Enter board dimensions\"\n            helperText=\"Please enter a dimension of either 3 or 4.\"\n            InputLabelProps={{\n              classes: {\n                root: classes.cssLabel\n              }\n            }}\n            InputProps={{\n              classes: {}\n            }}\n            error={!isValidInput}\n            onKeyDown={ event => {\n              if ((event.key === 'Enter') && isValidDimension(event.target.value)) setNewInstance(false)\n            }}\n            style={{ 'marginBottom': '1rem' }}\n          />\n          <br></br>\n          <Button disabled={disabled} onClick={() => setNewInstance(false)} color=\"primary\">Play Game</Button>\n        </Box>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nconst withDimensionScreen = (WrappedComponent) => {\n  return () => {\n    const [newInstance, setNewInstance] = useState(true);\n    const [dimension, setDimension] = useState(3);\n\n    if (newInstance) return <StartScreen setNewInstance={setNewInstance} setDimension={setDimension}/>;\n    return <WrappedComponent dimension={dimension}/>;\n  };\n};\n\nexport default withDimensionScreen;\n","import React, { useState } from 'react';\nimport { Box, Button, Grid, Link, ThemeProvider, Typography } from '@material-ui/core';\nimport theme from '../utils/theme';\n\nconst ChoosePlayerNumberScreen = ({ dimension, setNumberOfPlayers, setPlayerNumberWasChosen }) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ 'margin': '3rem' }}>\n        <Typography variant=\"h4\" style={{ 'marginBottom': '1rem' }}>Configuring board . . .</Typography>\n        <Typography variant=\"h5\" color=\"primary\">Choose the number of players:</Typography>\n        <Grid container style={{ 'maxWidth': '900px', 'margin': 'auto', 'display': 'flex', 'justifyContent': 'center' }}>\n          {dimension === 3 ? (\n            <Grid item sm={6} style={{ 'width': '100%', 'marginTop': '1rem' }}>\n              <Button\n                style={{ 'width': '50%' }}\n                variant=\"contained\" onClick={() => {\n                  setNumberOfPlayers(1);\n                  setPlayerNumberWasChosen(true);\n                }}\n                color=\"primary\">\n                1 Player\n            </Button>\n              <Box px={3} paddingTop={2}>\n                <Typography variant=\"body1\" style={{ 'marginBottom': '1rem' }}>1 Player mode pits you against an AI player that uses the Minimax algorithm, a game theory strategy, to choose the best move to make.</Typography>\n                <Link href=\"https://en.wikipedia.org/wiki/Minimax\" style={{ 'color': '#34e048'}} target=\"_blank\" rel=\"noopener\">Click to read more about the AI logic!</Link>\n              </Box>\n            </Grid>)\n            : ''\n          }\n          <Grid item sm={6} style={{ 'width': '100%', 'marginTop': '1rem' }}>\n            <Button\n              style={{ 'width': '50%' }}\n              variant=\"contained\" onClick={() => {\n                setNumberOfPlayers(2);\n                setPlayerNumberWasChosen(true);\n              }}\n              color=\"primary\">\n              2 Players\n              </Button>\n            <Box px={3} paddingTop={2}>\n              <Typography variant=\"body1\">2 Player mode pits you against a real person.</Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nconst withInstructionScreen = (WrappedComponent) => {\n  return ({ dimension }) => {\n    const [playerNumberWasChosen, setPlayerNumberWasChosen] = useState(false);\n    const [numberOfPlayers, setNumberOfPlayers] = useState(1);\n\n    if (!playerNumberWasChosen) return <ChoosePlayerNumberScreen dimension={dimension} setNumberOfPlayers={setNumberOfPlayers} setPlayerNumberWasChosen={setPlayerNumberWasChosen} />;\n    return <WrappedComponent numberOfPlayers={numberOfPlayers} dimension={dimension} />;\n  };\n};\n\nexport default withInstructionScreen;\n","import { useEffect, useState } from 'react';\nimport { Board } from './components/Board';\nimport { GameHeader } from './components/GameHeader';\nimport withDimensionScreen from './components/withDimensionScreen';\nimport withInstructionScreen from './components/withInstructionScreen';\nimport { Grid, Button, ThemeProvider } from '@material-ui/core';\nimport { gameStatus } from './utils/gameOverConditions'\n\nimport theme from './utils/theme';\n\nconst App = ({ numberOfPlayers, dimension }) => {\n  const initialBoardState = new Array(dimension * dimension).fill(null);\n\n  const [board, setBoard] = useState(initialBoardState);\n  const [currentPlayer, setCurrentPlayer] = useState('playerOne');\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winningPlayer, setWinningPlayer] = useState(undefined);\n\n  const isComputerTurn = numberOfPlayers === 1 && currentPlayer !== 'playerOne';\n\n  const resetGame = () => {\n    setBoard(initialBoardState);\n    setCurrentPlayer('playerOne');\n    setIsGameOver(false);\n    setWinningPlayer(undefined);\n  };\n\n  useEffect(() => {\n    const bestMove = () => {\n      const { isTie, winner } = gameStatus(board);\n\n      if (winner || isTie) {\n        setIsGameOver(true);\n        setWinningPlayer(winner);\n        return;\n      }\n\n      let bestScore = -Infinity;\n      let bestMove;\n\n      let newBoard = [...board];\n\n      for (let i = 0; i < board.length; i++) {\n        if (board[i] === null) {  // if this spot is available, try the rest of the tree\n          let testBoard = [...board];\n          testBoard[i] = 'o';\n          let score = miniMax(testBoard, false);\n          testBoard[i] = '';\n          if (score > bestScore) {\n            bestScore = score;\n            bestMove = i;\n          }\n        }\n      }\n\n      newBoard[bestMove] = 'o'\n      setBoard(newBoard);\n      setCurrentPlayer('playerOne');\n    };\n\n    if (isComputerTurn && (winningPlayer === undefined)) {\n      // Simulate that computer player is \"thinking\"\n      setTimeout(() => {\n        bestMove();\n      }, 1500);\n    }\n  }, [isComputerTurn]);\n\n  const miniMax = (testBoard, isMaximizingPlayer) => {\n    const scoreMap = {\n      \"o\": 1,\n      \"x\": -1,\n      \"Tie\": 0\n    };\n\n    const { isTie, winner } = gameStatus(testBoard);\n\n    if (isTie) {\n      return scoreMap[\"Tie\"];\n    }\n\n    if (winner) {\n      return scoreMap[winner];\n    }\n\n    let bestScore;\n\n    if (isMaximizingPlayer) { // goal: maximize score\n      bestScore = -Infinity;\n\n      for (let i = 0; i < testBoard.length; i++) {\n        if (testBoard[i] === null) {\n          const aiGameBoard = [...testBoard];\n          aiGameBoard[i] = 'o';\n          let score = miniMax(aiGameBoard, false);\n          bestScore = Math.max(bestScore, score);\n        }\n      }\n      return bestScore;\n    } else {  // goal: minimize score\n      bestScore = Infinity;\n\n      for (let i = 0; i < testBoard.length; i++) {\n        if (testBoard[i] === null) {\n          const aiGameBoard = [...testBoard];\n          aiGameBoard[i] = 'x';\n          let score = miniMax(aiGameBoard, true);\n          bestScore = Math.min(bestScore, score);\n        }\n      }\n      return bestScore;\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"content\">\n        <GameHeader isGameOver={isGameOver} currentPlayer={currentPlayer} winningPlayer={winningPlayer} dimension={dimension} />\n        <Grid style={{ 'marginBottom': '1rem' }}>\n          <Button color=\"primary\" style={{ 'fontWeight': 'bold'}} onClick={resetGame}>Restart Game</Button>\n          <Button color=\"secondary\" style={{ 'fontWeight': 'bold'}} onClick={() => { window.location.reload() }}>Go to Start Screen</Button>\n        </Grid>\n        <Board\n          board={board}\n          setBoard={setBoard}\n          boardDimension={dimension}\n          handleTurn={setCurrentPlayer}\n          currentPlayer={currentPlayer}\n          setIsGameOver={setIsGameOver}\n          setWinningPlayer={setWinningPlayer}\n          disabled={isComputerTurn || isGameOver}\n        />\n      </div>\n    </ThemeProvider>\n  );\n}\n\n// export default withInstructionScreen(withDimensionScreen(App));\nexport default withDimensionScreen(withInstructionScreen(App));\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}