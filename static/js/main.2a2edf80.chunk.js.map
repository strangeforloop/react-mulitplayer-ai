{"version":3,"sources":["components/Square.js","utils/gameOverConditions.js","components/Board.js","components/GameHeader.js","utils/theme.js","components/withSplashScreen.js","App.js","index.js"],"names":["Square","move","onClick","Button","style","disabled","get1DpositionFrom2Dmatrix","board","rowIndex","columnIndex","Math","sqrt","length","isGameOver","i","set","Set","j","position","add","size","has","winOnRow","console","log","winOnColumn","topLeftBottomRightDiagonal","topRightBottomLeftDiagonal","winOnDiagonal","haveMovesLeft","playerMoveMapping","Board","setBoard","boardDimension","currentPlayer","handleTurn","setIsGameOver","setWinningPlayer","useEffect","Array","fill","map","_","updateTurn","newBoard","updateBoard","GameHeader","player","winningPlayer","Typography","variant","startCase","theme","createMuiTheme","palette","primary","main","amber","contrastText","deepPurple","secondary","text","props","MuiButton","disableElevation","overrides","backgroundColor","textColor","StartScreen","setNewInstance","setDimension","useState","setDisabled","isValidInput","setIsValidInput","ThemeProvider","TextField","onInput","e","userInput","target","value","parseInt","placeholder","error","helperText","onKeyDown","event","key","color","withSplashScreen","WrappedComponent","newInstance","dimension","initialBoardState","setCurrentPlayer","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a2edf80.chunk.js","sourcesContent":["import { Button } from '@material-ui/core';\n\nconst Square = ({ move, onClick }) => {\n  return (\n    <Button\n      style={{'width': '3rem', 'height': '3rem'}}\n      onClick={onClick}\n      disabled={move !== null}\n    >\n      {move}\n    </Button>\n  );\n};\n\nexport { Square };\n","const get1DpositionFrom2Dmatrix = (board, rowIndex, columnIndex) => {\n    return (rowIndex * Math.sqrt(board.length)) + columnIndex;\n};\n\nconst winOnRow = (board) => {\n  for (let i = 0; i < Math.sqrt(board.length); i++) {\n    const set = new Set();\n    for (let j = 0; j < Math.sqrt(board.length); j++) {\n      const position = get1DpositionFrom2Dmatrix(board, i, j);\n      set.add(board[position]);\n    }\n\n    if (set.size === 1 & !set.has(null)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst winOnColumn = (board) => {\n  for (let i = 0; i < Math.sqrt(board.length); i++) {\n    const set = new Set();\n    for (let j = 0; j < Math.sqrt(board.length); j++) {\n      const position = get1DpositionFrom2Dmatrix(board, j, i);\n      set.add(board[position]);\n    }\n\n    if (set.size === 1 & !set.has(null)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst winOnDiagonal = (board) => {\n  let topLeftBottomRightDiagonal = new Set();\n  let topRightBottomLeftDiagonal = new Set();\n\n  // To Do: Fix math to not hard code numbers\n  // Right now, this only works if the dimension is 3.\n  for (let i = 0; i < 9; i = i + 4) {\n    topLeftBottomRightDiagonal.add(board[i]);\n  }\n\n  if (topLeftBottomRightDiagonal.size === 1 && !topLeftBottomRightDiagonal.has(null)) {\n    return true;\n  }\n\n  for (let i = 2; i < 8; i = i + 2) {\n    topRightBottomLeftDiagonal.add(board[i]);\n  }\n\n  if (topRightBottomLeftDiagonal.size === 1 && !topRightBottomLeftDiagonal.has(null)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst haveMovesLeft = (board) => {\n  // If there are no nulls, there are no moves left\n  for (let i = 0; i < board.length; i++) {\n    if (board[i] === null) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst isGameOver = (board) => {\n  // If (winOnRow(board) || winOnColumn(board) || winOnDiagonal(board) || !(haveMovesLeft(board)) ) {\n  if(winOnRow(board)) {\n    console.log('Win on row');\n    return true;\n  } else if (winOnColumn(board)) {\n    console.log('Win on column')\n    return true;\n  } else if (winOnDiagonal(board)) {\n    console.log('Win on diagonal')\n    return true;\n  } else if (!(haveMovesLeft(board))) {\n    console.log('Game over bc no more moves')\n    return true;\n  } else {\n    return false\n  }\n};\n\nexport { isGameOver };\n","import React, { useEffect } from 'react';\nimport { Square } from './Square';\nimport { isGameOver } from '../utils/gameOverConditions';\n\nconst playerMoveMapping = {\n  'playerOne': 'x',\n  'playerTwo': 'o',\n};\n\n\nconst updateTurn = (currentPlayer) => {\n  return currentPlayer === 'playerOne' ? 'playerTwo' : 'playerOne';\n};\n\nconst Board = ({ board, setBoard, boardDimension, currentPlayer, handleTurn, setIsGameOver , setWinningPlayer }) => {\n  // Assuming a row major orientation:\n  // 1D position = (rowIndex * width) + columnIndex\n  const get1DpositionFrom2Dmatrix = (rowIndex, columnIndex) => {\n    const position = (rowIndex * boardDimension) + columnIndex;\n    return position;\n  };\n\n  const updateBoard = (board, rowIndex, columnIndex, move) => {\n    let newBoard = [...board];\n    const position = get1DpositionFrom2Dmatrix(rowIndex, columnIndex);\n    newBoard[position] = move;\n    return newBoard;\n  };\n\n  useEffect(() => {\n    if (isGameOver(board) === true) {\n      setIsGameOver(true);\n    }\n  }, [board]);\n\n  return (\n    <div>\n      {Array(boardDimension).fill(null).map((_, rowIndex) => {\n        return (\n          <div key={rowIndex}>\n            {Array(boardDimension).fill(null).map((_, columnIndex) => {\n              const position = get1DpositionFrom2Dmatrix(rowIndex, columnIndex);\n              return (\n                <Square\n                  key={columnIndex}\n                  move={board[position]}\n                  onClick={ () => {\n                      setWinningPlayer(currentPlayer);\n                    // if (board[position] === null) {\n                      handleTurn(updateTurn(currentPlayer))\n                      // we clicked index the spot at [row][column]:\n                      // we want this to correspond to:\n                      const newBoard = updateBoard(board, rowIndex, columnIndex, playerMoveMapping[`${currentPlayer}`]);\n                      setBoard(newBoard);\n                    // }\n                  }}\n                  // disabled={board[position] !== null}\n                />)\n            })}\n          </div>\n        );\n      })}\n   </div>\n  );\n};\n\nexport { Board };\n","import React from 'react';\nimport startCase from 'lodash.startcase';\nimport { Typography } from '@material-ui/core';\n\nconst GameHeader = ({ isGameOver, currentPlayer, winningPlayer }) => {\n  const formatPlayer = (player) => {\n    return startCase(player);\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h2\">Tic Tac Toe</Typography>\n      {\n        isGameOver ? <Typography>{`Player ${winningPlayer} Won!`}</Typography> :\n          <Typography>\n            {formatPlayer(currentPlayer)}'s Turn\n          </Typography>\n      }\n    </div>\n  );\n};\n\nexport { GameHeader };\n","import { createMuiTheme } from \"@material-ui/core\";\nimport { deepPurple, amber } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: amber[500],\n      contrastText: deepPurple[900]\n    },\n    secondary: {\n      main: deepPurple[500],\n      contrastText: amber[900]\n    },\n    text: {\n      disabled: amber[500]\n    }\n  }\n});\n\ntheme.props = {\n  MuiButton: {\n    disableElevation: true,\n    variant: \"contained\"\n  }\n};\n\ntheme.overrides = {\n  MuiButton: {\n    disabled: {\n      backgroundColor: amber[500],\n      textColor: deepPurple[500]\n    }\n  }\n};\n\nexport default theme;\n","import { Button, TextField, ThemeProvider, Typography } from '@material-ui/core';\nimport { useState } from 'react';\nimport theme from '../utils/theme';\n\nconst StartScreen = ({setNewInstance, setDimension}) => {\n  const [disabled, setDisabled] = useState(true);\n  const [isValidInput, setIsValidInput] = useState(true);\n\n  const isValidDimension = (userInput) => {\n    if (parseInt(userInput, 10) < 3 || parseInt(userInput, 10) > 4) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        <Typography variant=\"h1\">Tic Tac Toe</Typography>\n        <TextField\n          onInput={(e) => {\n            if (isValidDimension(e.target.value)) {\n              setIsValidInput(true);\n              setDisabled(false);\n              const value = parseInt(e.target.value, 10);\n              setDimension(value);\n            } else {\n              setIsValidInput(false);\n              setDisabled(true);\n            }\n          }}\n          placeholder=\"Enter board dimensions\"\n          error={!isValidInput}\n          helperText=\"Please enter a dimension of either 3 or 4.\"\n          onKeyDown={ event => {\n            if (event.key === 'Enter') setNewInstance(false)\n          }}\n          />\n        <br></br>\n        <Button disabled={disabled} onClick={() => setNewInstance(false)} color=\"primary\">Play Game</Button>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nconst withSplashScreen = (WrappedComponent) => {\n  return () => {\n    const [newInstance, setNewInstance] = useState(true);\n    const [dimension, setDimension] = useState(3);\n\n    if (newInstance) return <StartScreen setNewInstance={setNewInstance} setDimension={setDimension}/>;\n    return <WrappedComponent dimension={dimension}/>;\n  };\n};\n\nexport default withSplashScreen;\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport { Board } from './components/Board';\nimport { GameHeader } from './components/GameHeader';\nimport withSplashScreen from './components/withSplashScreen';\nimport { Button, ThemeProvider } from '@material-ui/core';\n\nimport theme from './utils/theme';\n\nconst App = ({ dimension }) => {\n  // use dimension rather than the constant for it\n  const initialBoardState = new Array(dimension  * dimension).fill(null);\n  const [board, setBoard] = useState(initialBoardState);\n  const [currentPlayer, setCurrentPlayer] = useState('playerOne');\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winningPlayer, setWinningPlayer] = useState('');\n\n  const resetGame = () => {\n    setBoard(initialBoardState);\n    setCurrentPlayer('playerOne');\n    setIsGameOver(false);\n  };\n\n  useEffect(() => {\n    // prompt if they want to play again\n    // the user shouldn't be able to make more moves/clicks\n  }, [isGameOver]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <GameHeader isGameOver={isGameOver} currentPlayer={currentPlayer} winningPlayer={winningPlayer}/>\n          <Button color=\"primary\" onClick={ resetGame }>Restart Game</Button>\n          <Button color=\"secondary\">Go to Start Screen</Button>\n          <Board\n            board={board}\n            setBoard={setBoard}\n            boardDimension={dimension}\n            handleTurn={setCurrentPlayer}\n            currentPlayer={currentPlayer}\n            setIsGameOver={setIsGameOver}\n            setWinningPlayer={setWinningPlayer}\n          />\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default withSplashScreen(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}